name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main
      - update/workflow
  pull_request:
    # Run workflow whenever a PR is opened, updated (synchronized), or marked ready for review.
    types: [ opened, synchronize, ready_for_review ]

jobs:

  lint-js:
    name: 'Lint: JS'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        run: npm ci && cd app && npm ci && cd -
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          CI: true

      - name: Detect coding standard violations
        run: npm run lint

  unit-test-js:
    name: 'Unit test: JS'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup Jest cache
        uses: actions/cache@v2
        with:
          path: ~/.jest-cache
          key: ${{ runner.os }}-jest

      - name: Install Node dependencies
        run: npm ci && cd app && npm ci && cd -
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          CI: true

      - name: Run unit tests (with coverage)
        run: npm run test:coveralls -- --cacheDirectory="$HOME/.jest-cache"
        env:
          COVERALLS_REPO_TOKEN: "${{ secrets.COVERALLS_REPO_TOKEN }}"
          COVERALLS_GIT_BRANCH: "${{ github.ref }}"

  deploy-staging:
    name: "Deploy to Staging"
    if: github.ref == 'refs/heads/update/workflow'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY_STAGING }}

      - name: Build images
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT_STAGING }}
          VERSION: ${{ steps.package-version.outputs.current-version}}
        run: |
          make build.lighthouse
          make build.phpcs

      - name: Push images
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT_STAGING }}
          VERSION: ${{ steps.package-version.outputs.current-version}}
        run: |
          make push.lighthouse
          make push.phpcs
